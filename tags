!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddToTable	hashtable.c	/^void AddToTable(HashTable *table, char * key){$/;"	f
CheckTable	hashtable.c	/^bool CheckTable(HashTable *table, char * key){$/;"	f
ClearHeap	heap.c	/^void ClearHeap(Heap *h){$/;"	f
ClearLevel	level.c	/^void ClearLevel(Level *l){$/;"	f
ClearLog	value-log.c	/^void ClearLog(ValueLog *log){$/;"	f
ClearTable	hashtable.c	/^void ClearTable(HashTable *table){$/;"	f
CreateHashTable	hashtable.c	/^HashTable *CreateHashTable(int size){$/;"	f
CreateHeap	heap.c	/^Heap *CreateHeap(int size){$/;"	f
CreateLSM	lsm-tree.c	/^LSMtree *CreateLSM(int buffersize, int sizeratio, double fpr){$/;"	f
CreateLevel	level.c	/^Level *CreateLevel(int size, double fpr){$/;"	f
CreateLog	value-log.c	/^ValueLog *CreateLog(int head, int tail){$/;"	f
GetKeyPos	heap.c	/^int GetKeyPos(Heap *h, char * key){$/;"	f
Get_loc	lsm-tree.c	/^int Get_loc(LSMtree *lsm, char * key){$/;"	f
HashTable	global.h	/^typedef struct HashTable{$/;"	s
HashTable	global.h	/^} HashTable;$/;"	t	typeref:struct:HashTable
Heap	global.h	/^typedef struct Heap{$/;"	s
Heap	global.h	/^} Heap;$/;"	t	typeref:struct:Heap
HeapifyBottomTop	heap.c	/^void HeapifyBottomTop(Heap *h, int index){$/;"	f
HeapifyTopBottom	heap.c	/^void HeapifyTopBottom(Heap *h, int parent){$/;"	f
INT_MAX	lsm-tree.c	3;"	d	file:
InsertKey	heap.c	/^void InsertKey(Heap *h, char * key, int value, bool flag){$/;"	f
InsertRun	level.c	/^void InsertRun(Level *level, int count, int size, char * start, char * end){$/;"	f
L0	global.h	/^	LevelNode *L0;$/;"	m	struct:LSMtree
LSMtree	global.h	/^typedef struct LSMtree{$/;"	s
LSMtree	global.h	/^} LSMtree;$/;"	t	typeref:struct:LSMtree
Level	global.h	/^typedef struct Level{$/;"	s
Level	global.h	/^} Level;$/;"	t	typeref:struct:Level
LevelNode	global.h	/^typedef struct LevelNode{$/;"	s
LevelNode	global.h	/^} LevelNode;$/;"	t	typeref:struct:LevelNode
Merge	lsm-tree.c	/^void Merge(LevelNode *Current, int origin, int levelsize,$/;"	f
Node	global.h	/^typedef struct Node{$/;"	s
Node	global.h	/^} Node;$/;"	t	typeref:struct:Node
PopMin	heap.c	/^Node PopMin(Heap *h){$/;"	f
PopRun	level.c	/^Run PopRun(Level *level){$/;"	f
PrintNode	heap.c	/^void PrintNode(Heap *h, ValueLog *log){$/;"	f
Put	lsm-tree.c	/^void Put(LSMtree *lsm, char * key, int value, bool flag,ValueLog *log){$/;"	f
Run	global.h	/^typedef struct Run{$/;"	s
Run	global.h	/^} Run;$/;"	t	typeref:struct:Run
STRING_SIZE	global.h	17;"	d
T	global.h	/^	int T;$/;"	m	struct:LSMtree
ValueGet	value-log.c	/^uint64_t ValueGet(ValueLog *log,int loc){$/;"	f
ValueLog	global.h	/^typedef struct ValueLog{$/;"	s
ValueLog	global.h	/^} ValueLog;$/;"	t	typeref:struct:ValueLog
ValueLog_sync	value-log.c	/^int ValueLog_sync(ValueLog *log) {$/;"	f
ValuePut	value-log.c	/^void ValuePut(ValueLog *log, int *loc, const char * key, uint64_t key_len, uint64_t value){$/;"	f
array	global.h	/^	Node *array;$/;"	m	struct:Heap
array	global.h	/^	Run *array;$/;"	m	struct:Level
array	global.h	/^	char **array;$/;"	m	struct:HashTable
buffer	global.h	/^	Heap *buffer;$/;"	m	struct:LSMtree
count	global.h	/^	int count;$/;"	m	struct:HashTable
count	global.h	/^	int count;$/;"	m	struct:Heap
count	global.h	/^	int count;$/;"	m	struct:Level
count	global.h	/^	int count;$/;"	m	struct:Run
dead	lsm-tree.c	/^int dead = 0;$/;"	v
end	global.h	/^	char end[STRING_SIZE];$/;"	m	struct:Run
flag	global.h	/^	bool flag;$/;"	m	struct:Node
fp	global.h	/^	FILE *fp;$/;"	m	struct:ValueLog
fpr1	global.h	/^	double fpr1;$/;"	m	struct:LSMtree
head	global.h	/^	int head;$/;"	m	struct:ValueLog
key	global.h	/^	char key[STRING_SIZE];$/;"	m	struct:Node
level	global.h	/^	Level *level;$/;"	m	struct:LevelNode
lock	global.h	/^	pthread_mutex_t lock;$/;"	m	struct:LSMtree
next	global.h	/^	struct LevelNode *next;$/;"	m	struct:LevelNode	typeref:struct:LevelNode::LevelNode
number	global.h	/^	int number;$/;"	m	struct:LevelNode
size	global.h	/^	int size;$/;"	m	struct:Heap
size	global.h	/^	int size;$/;"	m	struct:Level
size	global.h	/^	int size;$/;"	m	struct:Run
start	global.h	/^	char start[STRING_SIZE];$/;"	m	struct:Run
tail	global.h	/^	int tail;$/;"	m	struct:ValueLog
targetfpr	global.h	/^	double targetfpr;$/;"	m	struct:Level
value	global.h	/^	int value;$/;"	m	struct:Node
